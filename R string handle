### Handling Text(It is very important, you have to understand these whole processes)
## String vector
str <- letters[1:5] # "a" "b" "c" "d" "e"

mean(str) # NA
nchar(str) #  1 1 1 1 1

str[3:4]<-c("Yes", "No")

nchar(str) # 1 1 3 2 1
length(str) # 5

## String connection(paste)
paste(c("a", "b", "c"), 1:5)
paste(c("a", "b", "c"), 1:5, sep="") # it is similar to paste0(c("a", "b", "c"), 1:5)

str.paste<-paste(paste(1:3, c(10,20,30), sep = " (which is "), "%)")
cat(str.paste, sep="\n") # line by line print

paste(1:3, " (which is ", c(10,20,30), " %)", sep = "") # same result, it is more intuitive

seq<-paste0(gcf.fna$NC_045512.2, collapse = "") # collapse is important to handle the sequence data
unique_bases<-unique(gcf.fna$NC_045512.2) # unique element print

## String split
library(stringr)
text <- "apple,banana,cherry"
split_text.v1 <- stringr::str_split(text, pattern = ",") # return is list
split_text.v2 <- str_split(text, pattern = ",", n=2) # only 2
split_text.v3 <- str_split(text, pattern = ",", simplify = T) # return is matrix

## String extraction
View(state.x77)
state<-head(rownames(state.x77), 5) # "Alabama"    "Alaska"     "Arizona"    "Arkansas"   "California"

substring(state, 1, 5) # it is similar to str_sub(state, 1, 5) "Alaba" "Alask" "Arizo" "Arkan" "Calif"
# substring(state, 1:5, 3:7)
substring(state, nchar(state)-2, nchar(state))

##⭐ String Replace(It is not the same integer replace)
text <- "Today is Monday"
substring(text, 10, 12)<-"Sun"

sub("a", "o", x) # Replace 'a' with 'o' for the first time
gsub("a", "o", x) # Replace 'a' with 'o' all of things

## String index return
x <- c("apple", "banana", "cherry", "date")
grep("a", x) # return to index included in 'a'
grep("a", x)

grepl("a", x) # return to logical value included in 'a'

regexpr("a", x) # The regexpr() function returns the length of the character that matches the position of the first part of the string that matches the pattern.
index.x<-gregexpr("a", x, ) # The gregexpr() is similar to regexpr(), but returns the position and length of all parts that match the pattern throughout the string.

for (ii in 1:length(index.x[[2]])){ # we cab find each 'a' position
  print(index.x[[2]][ii])
}

## String invert
original_string <- "Hello, World!"
rev(original_string) # vector invert(it is not useful when the vector has one element)

library(stringi)
reversed_string <- stri_reverse(original_string)
reversed_string # "!dlroW ,olleH", it can be useful when we control the RNA seq to DNA seq
