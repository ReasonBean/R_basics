### PRE

# 2번: 각 염색체별 평균 GC content 구하기
human.csv<-read.table(file = "mart_export.txt", sep = ",", col.names = c("Gene name",
                        "Gene % GC content",
                        "Transcript name",
                        "Chromosome/scaffold name",
                        "Transcript count",
                        "Transcript stable ID"))
human.df<-data.frame(human.csv) # data frame으로 저장하기

# 1행을 제외하는 것이 필요
library(dplyr)

human.df.md<-human.df[-1,] # 1행을 제외한 전부를 의미
rownames(human.df.md)<-seq(1:nrow(human.df.md)) # 행 번호 업데이트

human.df.md.gc.mean<-dplyr::summarise(human.df.md, "mean of GC.content" = mean(as.numeric(Gene...GC.content), na.rm = TRUE)) # 평균 계산

print(human.df.md.gc.mean)

# 3번: GC content의 최소값, 최대값을 만족하는 transcript는 몇 개인가?
min.gc<-fivenum(as.numeric(human.df.md$Gene...GC.content))[1] # 최소값
max.gc<-fivenum(as.numeric(human.df.md$Gene...GC.content))[5] # 최대값

# 해당 GC content를 가지고 있는 transcrpit number 출력
min.tc.num<-human.df.md[human.df.md$Gene...GC.content==min.gc, c("Transcript.count")]
max.tc.num<-human.df.md[human.df.md$Gene...GC.content==max.gc, c("Transcript.count")]

print(min.tc.num)
print(max.tc.num)

# 4번: GC content 값이 가장 높은 3개의 transcript 서열을 다운로드 받고, GC content 재계산
sort.gc<-sort(human.df.md$Gene...GC.content, decreasing = T)
top3.gc<-vector()
for (ii in 1:3){
  top3.gc[ii]<-human.df.md[human.df.md$Gene...GC.content==sort.gc[ii], "Gene.name"] # for 문을 이용해서 top3 GC content를 가진 Gene name 확인
}

# ensemble transcript ID를 이용해서 다운로드
# fasta file sequence 읽기
library(seqinr) # seqinr 라이브러리 호출

MIR4449.fna<-seqinr::read.fasta("MIR4449.fna") # MIR4449 fasta 파일 읽기
MIR3960.fna<-seqinr::read.fasta("MIR3960.fna") # MIR3960 fasta 파일 읽기
MIR3195.fna<-seqinr::read.fasta("MIR3195.fna") # MIR3195 fasta 파일 읽기

MIR4449.len<-length(MIR4449.fna$`NC_000004.12:52712682-52712747`)
MIR3960.len<-length(MIR3960.fna$`NC_000009.12:127785833-127785923`)
MIR3195.len<-length(MIR3195.fna$`NC_000020.11:62064802-62064885`)

MIR_gene_len<-c(MIR4449.len, MIR3960.len, MIR3195.len)

MIR4449.fna.paste<-paste(MIR4449.fna$`NC_000004.12:52712682-52712747`, collapse = "") # MIR4449 서열 합치기
MIR3960.fna.paste<-paste(MIR3960.fna$`NC_000009.12:127785833-127785923`, collapse = "") # MIR3960 서열 합치기
MIR3195.fna.paste<-paste(MIR3195.fna$`NC_000020.11:62064802-62064885`, collapse = "") # MIR3195 서열 합치기

MIR_gene_seq<-c(MIR4449.fna.paste, MIR3960.fna.paste, MIR3195.fna.paste) # 각 유전자 서열을 벡터로 저장
MIR_gene.gc<-vector()
for (ii in 1:3){
  MIR_gene.count.g<-length(gregexpr("g", MIR_gene_seq[ii])[[1]])
  MIR_gene.count.c<-length(gregexpr("c", MIR_gene_seq[ii])[[1]])
  
  MIR_gene.gc[ii]<-round(((MIR_gene.count.g+MIR_gene.count.c)/MIR_gene_len[ii])*100, 2)
}

MIR_gene.gc.df<-data.frame(row.names = c("MIR4449", "MIR3960", "MIR3195"), GC..content=MIR_gene.gc)

# 5번, 유전자 이름 출력하기
sort.gc<-sort(human.df.md$Gene...GC.content, decreasing = T)

top3.gc<-vector() # 상위 3개 유전자를 저장할 벡터

for (ii in 1:3){
  top3.gc[ii]<-human.df.md[human.df.md$Gene...GC.content==sort.gc[ii], "Gene.name"] # for 문을 이용해서 top3 GC content를 가진 Gene name 확인
}

# 해당 유전자의 transcript count를 확인
for (ii in 1:3){
  print(human.df.md[human.df.md$Gene.name==top3.gc[ii], "Transcript.count"]) # for 문을 이용해서 top3 GC content를 가진 Gene name 확인
}

### 연습 ###
# 특정 유전자만 찾기
human.df.md[human.df.md$Gene.name=="LINC03015",] # 특정 유전자를 가지고 있는 행을 모두 출력(중복 포함)
nrow(human.df.md[human.df.md$Gene.name=="LINC03015",]) # 특정 유전자를 가지고 있는 행의 개수 출력

dplyr::distinct(human.df.md[human.df.md$Gene.name=="LINC03015",]) # 특정 유전자를 가지고 있는 행을 모두 출력(중복 제외(투플 단위로 중복되는지 확인))
nrow(dplyr::distinct(human.df.md[human.df.md$Gene.name=="LINC03015",])) # 특정 유전자를 가지고 있는 행의 개수 출력

unique(human.df.md$Gene.name[human.df.md$Gene.name != ""]) # ⭐중복없이 GENE NAME만 출력(""도 포함되므로 제외하고 저장해야 됨)
# NA 제외하고 찾기

# 전체에서 NA가 있는 투플(행)을 모두 제거
df <- data.frame(
  x = c(1, 2, NA, 4, 5),
  y = c("a", "b", "c", NA, "e")
)

df_clean <- na.omit(df)

# NA가 없는 투플(행)만 선택
df_clean <- df[complete.cases(df), ]

# 특정 열에 대해서만 NA가 있는지 검색하고 해당 투플(행)을 전체 제거
df_clean <- df[complete.cases(df$x), ]

# 문자열 정의
sequence1 <- "agcagccctcggcggcccggggggcgggcggcggtgcccgtcccggggctgcgcgaggcacaggcg"
sequence2 <- "agcagccctcggctcaaccggggggcgggcggcggtgcccgtcccggggctgcgcgaggcacaggc"

library(stringr)
# 'a'의 개수 계산
count_a <- str_count(sequence1, "a") # stringr 활용
length(gregexpr("a", sequence)[[1]]) # 이것도 가능

count_a

gregexpr("a", sequence1)

# 서열 비교
mismatches <- which(strsplit(sequence1, "")[[1]] != strsplit(sequence2, "")[[1]]) # mismatch되는 부분의 인덱스 출력
mismatches # 인덱스 벡터

split.seq1<-str_split(sequence1, pattern = "") # paste된거 다시 분할하기

split.seq1[[1]][mismatches] # 틀린 번호만 출력

# 데이터 프레임에서 특정 문자를 포함하고 있는 행만 골라내기(이 방법 아니면 grepl 사용)
library(dplyr)
library(stringr) # str_detect

# 샘플 데이터 프레임 생성
df <- data.frame(
  name = c("apple", "banana", "cherry", "date"),
  value = 1:4,
  stringsAsFactors = FALSE
)

# 'a'를 포함하는 'name' 열의 행을 선택
rows_with_a <- df %>% 
  filter(str_detect(name, "a")) # rows_with_a <- df[grep("a", df$name), ]

rows_with_a

# MIR3195.fna$`NC_000020.11:62064802-62064885`속성 가져오기
name_attr<-attr(MIR3195.fna$`NC_000020.11:62064802-62064885`, "name")
Annot_attr<-attr(MIR3195.fna$`NC_000020.11:62064802-62064885`, "Annot")

# chromosome 정보만 추출
chromosome_info <- str_extract(Annot_attr, "(?<=\\[chromosome=)[^\\]]+")
chromosome_info
