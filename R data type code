### vector ###

## vector generation
x <- c(123) # 123
y <- c(1,4,10,20) #  1  4 10 20

## vector is generated by :
a <- 1:10 #  1  2  3  4  5  6  7  8  9 10
b <- 2:6 # 2 3 4 5 6
c <- 2:-2 #  2  1  0 -1 -2
d <- T:3 # 1 2 3, T is 1

## vector sequence
sequence1 <- seq(from = 1, to = 10)
sequebce2 <- sequence2 <- seq(from = 1, to = 10, by = 2) # Generate a sequence from 1 to 10, incrementing by 2
sequence3 <- seq(from = 1, to = 10, length.out = 5) # Generate a sequence from 1 to 10 with a length of 5

## vector replication
repeated_value <- rep(5, times = 5) # Replicate the number 5, five times
repeated_vector <- rep(c(1, 2, 3), each = 3) # Replicate each element in the vector
limited_replication <- rep(c(1:10), each=2, len=5) # Replicate a number with a length limit

## vector value modifies by using index
limited_replication[1] = 5 # 5 1 2 2 3

## append and replace
append(1:10, 100) # 1 2 3 4 5 6 7 8 9 10 100

original_vector <- c(1, 2, 4, 5) # Original vector
new_vector <- append(original_vector, 3, after = 2) # Append the number 3 after the second position, 1, 2, 3, 4, 5

original_vector <- c(1, 2, 3, 4, 5) # Original vector
replaced_vector <- replace(original_vector, list = c(2, 5), values = c(20, 50)) # Replace the second and fifth elements with 20 and 50, 1, 20, 3, 4, 50

## names()
fruits <- c(10, 15, 5, 20) # Create and name a vector
names(fruits) <- c("Apple", "Banana", "Cherry", "Date")

names(fruits)[2] <- "Blueberry" # Create and name a vector

fruits[-2] # Delete index number 2

## sort()
numeric_vector <- c(10, 2, 30, 4, 50, 6)
sorted_vector <- sort(numeric_vector) # Sort the vector in ascending order
sorted_vector_reverse <- sort(numeric_vector, decreasing = T) # Sort the vector in descending order

### matrix
## matrix setting
m1 <- matrix(data = 1:9, nrow = 3, ncol = 3) # Create a matrix with numbers from 1 to 9, ☢️matrix can save the value by column(column is the first)
m2 <- matrix(data = 1:9, nrow = 3, ncol = 3, byrow = TRUE) # Create a matrix with numbers from 1 to 9, matrix can be generated the value by row is the first
m5 <- matrix(data = 1:4, nrow = 2, dimnames = list(c("Row1", "Row2"), c("Col1", "Col2"))) # Name matrix

attributes(m5) # attributes about the matrix, this is list
rownames(m5) <- c("R1", "R2")
colnames(m5) <- c("C1", "C2")

## rbind() and cbind()
rbind(1:4, 4:1, 1:2)
cbind(1:5, 11:15)

## matrix indexing
mat<-matrix(1:12, ncol=4)
mat[2,3] # row=2, col=3
mat[-2,] # Delete row index number 2

## matrix transpose
t(mat) # transform to transpose
c(mat) # transform to vector
as.vector(mat) # transform to vector

### array
data_vector <- 1:12 # Create a three-dimensional array
dim_vector <- c(2, 3, 2)  # 2 rows, 3 columns, and 2 layers
my_3d_array <- array(data_vector, dim = dim_vector)
my_3d_array[1,1,2] # print 7

### list
my_list <- list(name = "John Doe", age = 30, married = TRUE, children_names = list("Alice", "Bob")) # Create a list containing various types of elements
# result
# my_list$children_names[[1]] [1] "Alice", my_list$children_names[[2]] [1] "Bob"

### factor
fruit_names <- c("apple", "banana", "orange", "apple", "banana") # Create a vector of categories
fruit_factors <- factor(fruit_names) # Convert the vector to a factor
print(fruit_factors) # Print the factor
length(fruit_factors) # Lengths the vector
levels(fruit_factors) # Levels the factor

### data fram
## data frame setting
my.df <- data.frame( # Create a data frame
  Name = c("Alice", "Bob", "Charlie"),
  Age = c(25, 30, 35),
  Salary = c(50000, 60000, 70000),
  row.names = c("a", "b", "c")
)

## data frame indexing
my.df[["Name"]] # my.df[[1]] = my.df$Name
my.df["a",1:2] # similar to matrix

## iris data set
iris[iris$Species=="setosa",]
mod<-iris[iris$Species=="setosa", c("Sepal.Length", "Species")] # Sepal.Length and Species with setosa

chg<-cbind(mod, number=seq(1:50)) # binding new column
transform(iris, newc=11:16) # binding new column

iris[iris[,"Petal.Length"]>3,] # find out rows of petal length > 3

## data frame drop
df <- data.frame(x = 1:5, y = 6:10)

result <- df[, "x"] # if drop = TRUE
print(result) # result is vector

result <- df[, "x", drop=F] # if drop = FALSE
print(result) # result is data frame
View(result)
